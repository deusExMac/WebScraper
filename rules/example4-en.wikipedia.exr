
########################################################################################################################################################
#
# Example library 4: Demonstrating the use of page preconditions before applying css selectors
# 
# This library scraps/extracts the team's and team manager's name of pages related to english premier league clubs from wikipedia. For example,
# for the football team Barnsley F. C, the team name is Barnsley F.C. and team's manager is Michael Duff (August 2022) as can be
# seen on the team's wikipedia page https://en.wikipedia.org/wiki/Barnsley_F.C.
# This library demonstrates the use of page rule preconditions that allows extracting the data specified in ruleCSSSelector only if the precondition(s) 
# hold. If precondition(s) do not hold, ruleCSSSelector is not applied and hence no data is extracted.
#
# The library contains rule "getLinks" for harvesting links.
# 
# How to apply this rule:
#
# v0.05a){1}WebScraper >> crawl -n -1 -r rules/example4-en.wikipedia.exr -o csv/example4.csv https://en.wikipedia.org/wiki/List_of_Premier_League_clubs
#
# NOTE: option -n -1 means no maximum number of pages constraint so that at least some premier league football pages will be fetched/processed. If no -n
# option is provided, maximum number of pages to fetch defaults to setting maxPages in the loaded config file.
#
# This will extract the team's (title) and manager's name of all the wikipedia pages downloaded and store it in the csv file named example4.csv .
# NOTE: TODO: Complete this! You may find in the .csv file entries with empty values for the teams full name. This is because this library does not make any check or 
# does not imply any precondition before applying the rules.
# 
# v0.1@5/8/2022
#
########################################################################################################################################################


{

# Description of the library

"libraryDescription": "Library to extract the team name and team's manager name from wikipedia articles related to english premier league football clubs",



# List of rule names, whose extracted data should be stored in the csv file. 
# IMPORTANT: date the url was accessed (dateaccessed) and the url are always automatically added to the csv file

"csvLineFormat":["teamName", "manager"],



# How should the downloaded html page be rendered.
# WebScraper supports two modes of URL downloads:
# static: meaning that the web page does not load its content dynamically (via js or ajax) and one http request is enough to get
#         the entire page content. 
# dynamic: meaning the athe web page has dynamic content that is loaded via js or ajax once the web page has
#          been downloaded or is scrolled. Example of such dynamic pages are e.g. youtube pages where comments are only displayed
#          when the user scrolls down. Scraping such dynamic pages is also supported by WebScraper. Dynamic pages load slower though.
# 
# If renderPages has a value of False, this means the no page rendering is carried out and should be used only in case of pages that
# do not load content dynamicaly.
# If renderPages has a value of True, this means the page rendering is done and should be used only in case of pages that load content
# dynamically. 
# 
# Since we access wikipedia articles with no dynamic content, we will statically load these pages. Hence renderPages is set to False. This
# will make page loading faster.

"renderPages":False,



# List of individual rules comprising this library and that will be applied to each page downloaded follows. 
# This library consists of one rule only, named articleTitle. The value extracted by this rule
# will be assigned to a special key/variable with the same name as the rule i.e. articleTitle.
# These keys/variables can be references inside thi rule file e.g. see csvLineFormat field above.

"library": [


# Rule to extract/scrape the title of the downloaded article. The title
# is assumed to be the teams name, not it's full name (or formal name)

{

 # If no ruleName is specified, the extracted data of this rule cannot be used
 # in  the csvLineFormat attribute.
 
 "ruleName": "teamName",
 
 
 # Short description
 
 "ruleDescription": "Extracts the team and manager name from wikipedia article to premier league pages",
 
 
 
 # Regular expression specifying which URL pattern will trigger the
 # execution of this rule. 
 # This is a list ([]) meaning you may add many disjunctive regular expressions
 # Here we specify that this rule is to be activated when the URL contains en.wikipedia.org/wiki.
 # Special regular expression metacharacters (.) are escaped.
 
 "ruleURLActivationCondition": ["en\.wikipedia\.org/wiki"],
 
 
 
 
 # A CSS selector specifying the element on the page to scrape.
 # NOTE: the CSS selector may return more than one mathing element.
 
 "ruleCSSSelector": "#firstHeading",
 
 
 # Once the CSS selector element in  ruleCSSSelector has been found, what 
 # exactly to extract from element: the text or some other attribute. 
 # text means simply return the text of the scraped element.
 "ruleTargetAttribute": "text",
 
 # Regular expression that specifies the condition the extracted text or attribute value has to
 # fulfill. Empty string here means no condition. If condition is not met, nothing is returned.
 "ruleContentCondition": "",
 
 # Does this rule return more than one result?
 "ruleReturnsMore": False,
 
 # If the rule returns more than one result, which result to return. Negative means all elements. 
 # This takes only effect if ruleReturnsMore is set to True.
 "ruleReturnedMatchPos": 0,
 
 # NOT YET SUPPORTED. How strict should the extraction be? If rule returns more than one result, should this be considered
 # an error?
 "ruleReturningMoreIsError": False,
 
 # List of characters to remove from the extracted value (text or attribute)
 "ruleRemoveChars": [],
},


#
# This rule returns a specific field in the infobox of wikipedia articles related to fottball clubs
# that contains the teams' manager name.
#
# This rule uses page preconditions i.e. preconditions that are checked and must hold before applying 
# the selector ruleCSSSelector. The selector is only applied if precondition holds.
#
# In the precondition it is checked whether the 9th row of the infobox has a text value
# that matches the regular expression (Manager|Head coach) i.e. contains the words "Manager"
# or "Head coach" (case sensitive!). If so, the selector ruleCSSSelector is applied. If not,
# ruleCSSSelector is not applied.
#
{
 
 # ruleName so that the scraped data by this rule can be used in csvLineFormat.
 
 "ruleName": "manager",
 
 
 
 "ruleDescription": "Extracts the team's manager name ",
 
 # Regular expression specifying which URL pattern will trigger the
 # execution of this rule. 
 # This is a list ([]) meaning you may add many disjunctive regular expressions
 # Here we specify that this rule is to be activated when the URL contains en.wikipedia.org/wiki.
 # Special regular expression metacharacters (.) are escaped.
 
 "ruleURLActivationCondition": ["en\.wikipedia\.org/wiki"],
 
 
 # Page rule preconditions, i.e. preconditions that must hold for the PAGE in order  
 # to apply the selector in ruleCSSSelector. 
 # This rule contains only one page precondition. More preconditions can be set for the same
 # page along with boolean modifiers specifying if any or all of the preconditions must hold.
 # More complicated expressions are also possible.
 "rulePreconditions" : [ 
                          {
                             # The precondition selector i.e. the element specifying to be
                             # checked.
                             
                            "ecCSSSelector" : "tr:nth-child(9) .infobox-label", 
                            
                            
                            # Regular expression the text property of the element 
                            # in ecCSSSelector must match. Only text property is currently 
                            # supported. If element matches regular expression, the 
                            # precondition holds and the ruleCSSSelector is applied.
                            #
                            # Some premier league pages on wikipedia may not use "Manager"
                            # in the infobox, but "Head coach" instead. Hence this regular
                            # expression. 
                            # Specified regular expression is by default case sensitive.
                            # If you would like to specify a case INsensitive match,
                            # you may add the (?i) flag i.e.
                            # "(?i)(Manager|Head coach)".                             
                            
                            "ecTextCondition" : "(Manager|Head coach)"
                          }
 ],
                          
 
 
 
 
 
 # A CSS selector specifying the element on the page to scrape.
 # The precondition makes sure that the manager's name can be found in this element.
 #
 # If this rule is applied to a wikipedia page that is not about a football club,
 # the CSS selector may not be valid and an empty string is returned. You may see in the .csv file
 # empty values for field teamFullName.
 # This is because there are no conditions specified when to apply this selector. ruleCSSSelectors are always
 # applied on pages, without any checking whther or not these exists.
 #
 
 "ruleCSSSelector": "tr:nth-child(9) .agent",
 
 
 
 # Once the CSS selector element in ruleCSSSelector has been found, what 
 # exactly to extract from the element: the text or some other attribute. 
 # text means simply return the text of the scraped element.
 
 "ruleTargetAttribute": "text",
 
 
 # Regular expression that specifies the condition the extracted text or attribute value has to
 # fulfill. Empty string here means no condition. If condition is not met, nothing is returned.
 
 "ruleContentCondition": "",
 
 
 
 # Does this rule return more than one result?
 
 "ruleReturnsMore": False,
 
 
 # If the rule returns more than one result, which result to return. Negative means all elements. 
 # This takes only effect if ruleReturnsMore is set to True.
 
 "ruleReturnedMatchPos": 0,
 
 
 
 # NOT YET SUPPORTED. How strict should the extraction be? If rule returns more than one result, should this be considered
 # an error?
 
 "ruleReturningMoreIsError": False,
 
 
 
 # List of characters to remove from the extracted value (text or attribute)
 
 "ruleRemoveChars": [],
},





# Rule for extracting links from the page
# A the name getLinks is a keyword signifying a rule that extracts
# hyperlinks found on the page what match the specified conditions.
#
# When you would like to extract and follow hyperlinks found on a webpage,
# you must name the respective rule extracting these hyperlins getLinks. 
# This is because the extracted links are handled differently from other 
# extracted data (e.g. they must be added to the queue).


{

 # Name of rule. Remember getLinks is a reserved word implying
 # a very specific behavior.
 "ruleName": "getLinks",
 
 "ruleDescription": "Extracting hyperlinks from the downloaded webpage",
 
 # Regular expression specifying for which URLs/pages to activate this rule.
 "ruleURLActivationCondition": ["en\.wikipedia\.org.*$"],
 
 # CSS selector containing the information (hyperlink) to extract
 "ruleCSSSelector": "a[href]",
 
 # From the specified selector, we are interested only in the value of the
 # attribute href, which contains the hyperlink.
 # NOTICE: WebScraper takes care of relative links
 "ruleTargetAttribute": "href",
 
 # Once we got the value of the target attribute, this regular expression
 # specifies a condition that the value has to meet. Here, we are interested 
 # only in hyperlinks that point to english wikipedia pages. I.e. pages outside
 # of the english wikipedia site will not be extracted and hence won't be followed.
 "ruleContentCondition": "en\.wikipedia\.org/.*$",
 
 # This signifies that this rule will not return only one chunk of information, but
 # a list of chunkc since a web page may have many <a href= > tags.
 "ruleReturnsMore": True,
 
 # -1 means return all matched
 "ruleReturnedMatchPos": -1,
 
 "ruleReturningMoreIsError": False 
}

]


}