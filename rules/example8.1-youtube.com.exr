
########################################################################################################################################################
#
# Example library 8.1: Demonstrating interacting with the downloaded web page to load dynamically its content. In this 
#                       example, one simple interaction is shown namely scrolling of the web page in order to load 
#                       more of its content before extracting/scraping data. 
#                       This example uses number of times to control scrolling; it scrolls the entire page a specified number of times 
#                       specified in this .exr file.
# 
# Related fields: dpcScrolldown, ruleDynamicElements, renderPages, dpcURLActivationCondition, dpcType 
#
# This example extracts the names of users that have commented on youtube videos. A youtube page, when loaded
# does not immediately load the comment section beneath the video. On youtube in order for the video comments to appear/load,
# the page must be scrolled down. The more the page is scrolled down, the more comments will appear. This library
# shows how to scroll page and configure some aspects of scrolling process.
#
# To define an interaction inside an .exr file, the field ruleDynamicElements must be used which consists of
# a list of interactions that should be applied on the loaded page. The range of interactions includes, scrolling the page,
# filling input elements, clicking buttons etc. In this example, only one iteraction if defined, that scrolls down
# the web page thereby loading more youtube comments. If more than one interactions is present, these all are executed  
# on the downloaded page, if constraints match, and in the order they are defined. 
#
# This example demonstrates also how to control the number of times the web page should be scrolled down. Here, a constant, fixed amount of
# scrolls are applied to all youtube pages.
#
# 
#
# IMPORTANT: This example makes the assumption that no authentication cookie is used for the requst i.e. access to youtube pages is done as a 
#            non-authenticated account. When authentication cookie is present, selectors might need to change.
# 
# How to apply this rule:
#
# v0.05a){1}WebScraper >> crawl -n 1 -r rules/example8.1-youtube.com.exr -o csv/example8.1.csv https://www.youtube.com/watch?v=GJDNkVDGM_s
#
# This will extract the name of users that have commented on the youtube video. It will extract the user names commented on one video. Change
# the -n argument appropriately if you would like to extract user names as WebScraper crawls youtube pages.
# 
# v0.1@18/09/2022
#
########################################################################################################################################################



{

# Description of the library

"libraryDescription": "Library to extract the user names from comments beneath videos on youtube pages.",




"csvLineFormat":["userName"],




 
# Since we access youtube pages and are interested in the comments that are loaded dynamically when the page
# is scrolled, renderPages is set to True in order to interact (i.e. scroll) with the youtube page. Interactions
# are specified in the ruleDynamicElements field.
#
# When setting renderPages to true, this will make page loading and processing slower. 
"renderPages":True,


# ruleDynamicElements is a field that defines the set of interactions to perform with a loaded web pages, i.e. 
# operations that should be applied on a web page after it has been loaded. These operations/interactions
# are always applied to the page AFTER the page has been loaded and BEFORE the data extraction process is initiated
# i.e. application of rules starts. More than one interactions can be defined in the set ruleDynamicElements.
# Operations are applied in the same order as they are defined in the ruleDynamicElements list.
#
# Each operation specifies on which URL to apply this operation, what kind of operation to apply and 
# parameters related to each operation.
# Currently, the supported iteractions/operations include: scrolling entire page, scrolling an 
# html element, clicking on buttons and elements and filling input elements. Below more information
# for each field can be found in the comments.

"ruleDynamicElements": [ 

         # First operation/interaction to apply on the downloaded page. 
         {
             # On which URLs to apply this operation. URLs matching this
             # regular expression will be the target of this operation. If not matched,
             # interaction is not applied.
		     "dpcURLActivationCondition": "youtube\.com",
		     
		     # Type of operation to apply. Valid values are: scrollpage, scroll, click, fill
		     # scrollpage scrolls the entire page
		     # scroll scrolls an html element
		     # click, clicks on a button of html element (includes submits)
		     "dpcType":"scrollpage",
		     
		     # CSS selector specifying on which element to apply the interaction/operation. E.g.
		     # when dpcType is fill, then this should specify the input element to fill, if dpcType
		     # has a value of click, this field specifies the button/element to click on.
		     "dpcPageElement":"",
		     
		     # If dpcType is scrollpage or scroll, dpcScrolldown specifies how many times 
		     # to scroll down. This is one way of controlling scrolling of a page. Number
             # of time is independent of the page's state beeing scrolled.
		     # Negative values or zero means no scrolling at all. 
		     "dpcScrolldown":4,
		     
		     # dpcScrollTargetElementCount is another way of controlling scrolling.
		     # It encodes a condition to stop PAGE scrolling
		     # in terms of  the number of desired html elements that should appear.
		     # dpcScrollTargetElementCount must have two fields named scrollTargetSelector and scrollTargetCount
		     #
		     # scrollTargetSelector: CSS Selector of the items to count
		     # scrollTargetCount: how many elements specified by  scrollTargetSelector should
		     # be on the page before stop scrolling. If this amount is reached, scrolling is stopped.
		     # if scrollTargetCount is negative, infinite scrolling is initiated: this means scrolling will continue
		     # while new elements are loaded. Value of 0 means no scrolling at all.
		     #
		     # For example, using this field you may specify scroll conditions like: continue
		     # scrolling of page until X number of comments will appear.
		     #
		     # dpcScrollTargetElementCount and dpcScrolldown are mutually exclusive when operation
		     # is scrollpage or scroll. dpcScrollTargetElementCount is always given priority if both are
		     # specified. 
             # Here, dpcScrollTargetElementCount is commented out which defaults in 
             # an empty dpcScrollTargetElementCount dictionary which means that the dpcScrolldown
             # option will be used. Currently this is the only way to use dpcScrolldown.
		     #
		     #
		     # IMPORTANT: dpcScrollTargetElementCount is a json object that must contain the 
		     # fields scrollTargetSelector and scrollTargetCount, i.e. these are mandantory.
		     # scrollTargetCount is an integet, but here MUST be encoded as a string
		     # 
		     #"dpcScrollTargetElementCount" : { "scrollTargetSelector": "#author-text .ytd-comment-renderer", "scrollTargetCount":"-1" },
		     
		     
		     # CSS element  specifying which html element to wait to appear on the page, before continuing applying 
		     # interactions/operations. If dpcWaitFor is non empty, execution is blocked. If left blank, no waiting is conducted and
		     # execution is not blocked.  
		     "dpcWaitFor":"",
		     
		     # String to fill html input elements. 
		     # Used only when dpcType is set to 'fill'
		     "dpcFillContent": ""		     
		 }
		 
		 # Other interactions/operations cab be added here. If more than one interaction is present,
		 # these are executed in the order they are defined. All interactions are applied on a single page
		 # if activation condition is met.
],





# Request cookies send with each request. 
# We sent here only one cookie, the cookie with name CONSENT and
# value YES+cb.20211005-08-p0.en+FX+206 in order to avoid receiving youtube's cookie consent form
# since we access a youtube video page without identifying first.
#

"requestCookies": {
                   "CONSENT": "YES+cb.20211005-08-p0.en+FX+206"                    
},




######################################################################################
#
#  List of rules that will be applied to every downloaded page starts here.
#
#
######################################################################################





"library": [

{
 
 
 "ruleName": "userName", 
 "ruleDescription": "Extracts the user name of users commenting on youtube videos",
 
 
 "ruleURLActivationCondition": ["youtube\.com/watch"],
 
 "ruleCSSSelector": "#author-text .ytd-comment-renderer",
 
 
 "ruleTargetAttribute": "text",
 
 # Empty i.e. no constraints
 "ruleContentCondition": "",
 
 
 "ruleReturnsMore": True,
 
 
 "ruleReturnedMatchPos": -1,
 
 # Not yet supported
 "ruleReturningMoreIsError": False,
 
 # List of characters to remove from the extracted value (text or attribute)
 "ruleRemoveChars": [],
},







{

 
 "ruleName": "getLinks",
 
 "ruleDescription": "Extracting hyperlinks from the downloaded webpage",
 
 
 "ruleURLActivationCondition": ["www\.youtube\.com\/watch"],
 
 
 "ruleCSSSelector": "a[href]",
 
 
 "ruleTargetAttribute": "href",
 
 
 "ruleContentCondition": "(www\.youtube\.com\/watch\?v=)((?!&lc=|t=).)*$",
 
 
 "ruleReturnsMore": True,
 
 
 "ruleReturnedMatchPos": -1,
 
 "ruleReturningMoreIsError": False 
}

]


}