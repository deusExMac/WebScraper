
########################################################################################################################################################
#
# Example library 8.4: Demonstrating how to interact with web pages. Demonstrates how to fill input boxes, click on buttons and submitting forms executied in a sequence.
#                    
# 
# Related fields: ruleDynamicElements, dpcType (fill, click), dpcPageElement, dpcWaitFor, dpcFillContent, renderPages 
#
#
#
# This example visits the google main page and does a search with the keyword python. It visits the main page, clicks on the cookie consent popup, 
# fills the search box with 'python' and clicks on the google search button.
#
# IMPORTANT! The .exr file makes the assumption google's main page is accessed as guest (i.e. without authetication cookie). 
# I.e. access is as guest and that's why the consent page appears.
# 
# 
# How to use this rule:
#
# crawl -M -n 1 -r rules/example8.4-google.exr -o csv/example8.4.csv -G https://www.google.com/
#
#
# 
# v0.1@09/09/2022
#
########################################################################################################################################################



{

# Description of the library

"libraryDescription": "Library to submit forms by clicking on submit button.",



# List of rule names (or ruleReturnedValueNames as is the case in this example), whose extracted data should be stored in the csv file. 
# IMPORTANT: date the url was accessed (dateaccessed) and the url are always automatically added to the csv file

"csvLineFormat":[],

# The list of ruleNames (or ruleReturnedValueNames) that must return non-empty values
# to consider the extraction successful and the data be written to the csv file. 

"requiredFilledFields": [],

# Minimum percentage of ruleName that must return non-empty
# data during their application in order to consider the extraction process
# a success and hence add the extracted data to the csv file.

"allowedMinimumFilled" : 0.8


# How should the downloaded html page be rendered.
# WebScraper supports two modes of URL downloads:
# static: meaning that the web page does not load its content dynamically (via js or ajax) and one http request is enough to get
#         the entire page content. 
# dynamic: meaning the athe web page has dynamic content that is loaded via js or ajax once the web page has
#          been downloaded or is scrolled. Example of such dynamic pages are e.g. youtube pages where comments are only displayed
#          when the user scrolls down. Scraping such dynamic pages is also supported by WebScraper. Dynamic pages load slower though.
# 
# If renderPages has a value of False, this means the no page rendering is carried out and should be used only in case of pages that
# do not load content dynamicaly.
# If renderPages has a value of True, this means the page rendering is done and should be used only in case of pages that load content
# dynamically. 
# 
# Since we access wikipedia articles with no dynamic content, we will statically load these pages. Hence renderPages is set to False. This
# will make page loading faster. If renderPages is missing, it defaults to False.

"renderPages":True,

"requestCookies": {
                                      
},

# ruleDynamicElements BELOW ARE correct for: Clicking on google consent page, filling input with python 
# clicking on submit button are correct.
#
# THE AIM IS TO BE ABLE TO search on google. ASSUMES access to google page is without authentication cookies
# i.e. as a guest.

"ruleDynamicElements": [ 

         # This rule is to get rid of 
         # the google consent page 
         # by clicking on the button id L2AGLb.
         # If an authentication cookie is set, the next is not 
         # required
         {
		     "dpcURLActivationCondition" : "google\.com/?$",
		     "dpcType":"click",
		     "dpcPageElement":"#L2AGLb",
		     "dpcScrolldown":-1,
		     "dpcWaitFor":"img.lnXdpd",
		     "dpcFillContent": ""		     
		 },
		 
         # Fill input box with search string. 
         # Here, python
		 {
		     "dpcURLActivationCondition" : "google\.com/?$",
		     "dpcType":"fill",
		     "dpcPageElement":"input.gLFyf",
		     "dpcScrolldown":-1,
		     "dpcWaitFor":"",
		     "dpcFillContent": "python"		     
		 },
		 
         # Click the search button.
		 {
		     "dpcURLActivationCondition" : "google\.com/?$",
		     "dpcType":"click",
		     "dpcPageElement":"input[name='btnK']",
		     "dpcScrolldown":-1,
		     "dpcWaitFor":"#logo",
		     "dpcFillContent": "",
		     "dpcRedirects": False		     
		 },
		 

		 
],




######################################################################################
#
#  List of rules that will be applied on every downloaded page starts here
#
######################################################################################




# List of individual rules comprising this library and that will be applied to each page downloaded follows. 
# This library consists of one rule only, named teamNamesWithMoreThan3UCLTitles. 

"library": [



# Rule to extract/scrape the title of the downloaded article. The title
# is assumed to be the teams name, not it's full name (or formal name)

{

 # If no ruleName is specified, the extracted data of this rule cannot be used
 # in  the csvLineFormat attribute.
 
 "ruleName": "getLinks",
 
 
 # Short description
 
 "ruleDescription": "Extracts the team name that has won the UCL more than 2 times",
 
 
 
 # Regular expression specifying which URL pattern will trigger the
 # execution of this rule. 
 # This is a list ([]) meaning you may add many disjunctive regular expressions
 # Here we specify that this rule is to be activated when the URL contains en.wikipedia.org/wiki.
 # Special regular expression metacharacters (.) are escaped.
 
 "ruleURLActivationCondition": ["google\.com"],
 
 
 # A CSS selector specifying the element on the page to scrape.
 # NOTE: the CSS selector may return more than one mathing element.
 
 "ruleCSSSelector": "a[href]",
 
 # List of match preconditions that will be applied
 # to each and every result returned by ruleCSSSelector. Elements
 # matching preconditions will be kept in result list, elements that
 # don't match will be removed from the result set. The match precondition
 # in this example specifies the ecRuleCSSSelector field which means that
 # if the precondition holds for an element, a different part of the examined element is 
 # extracted and returned. 
 # If more than one match precondition is specified, these are
 # combined using ANY operator.
 # Currently, only ANY operator is supported.
 #
 # NOTE: Match preconditions without ecRuleCSSSelector field have not been tested.
 
 
 
 # Once the CSS selector element in  ruleCSSSelector has been found, or data has been
 # extracted by ecRuleCSSSelector, what 
 # exactly to extract from this element: the text or some other attribute. 
 # text means simply return the text of the scraped element.
 #
 # In ruleMatchPreconditions, ruleTargetAttribute will be applied to the newly extracted
 # elements.
 
 "ruleTargetAttribute": "href",
 
 
 
 
 # List of css selectors to apply to each extracted element by ruleCSSSelector.
 # From each extracted element, extract th and the td elements specified.
 # NOTE: It is assumed tha each of the selectors in rulePostCSSSelector, 
 # will return at most one element. 
 
 #"rulePostCSSSelector" : ["th", "td:nth-child(2)", "td:nth-child(3)", "td:nth-child(4)"]
 
 
 # These will be the key names under which the extracted elements by
 # rulePostCSSSelector will be stored. Name must be ordered based on selectors 
 # specified in rulePostCSSSelector.
 # NOTE: number of keys must be the same as number of css selectors in
 # rulePostCSSSelector.
 
 #"ruleReturnedValueNames" : ["name", "winnerCount", "runnerUpCount", "seasonsWon"]
 
 
 
 
 # Regular expression that specifies the condition the extracted text or attribute value has to
 # fulfill. Empty string here means no condition. If condition is not met, nothing is returned.
 "ruleContentCondition": "",
 
 # Does this rule return more than one result?
 "ruleReturnsMore": True,
 
 # If the rule returns more than one result, which result to return. Negative means all elements. 
 # This takes only effect if ruleReturnsMore is set to True.
 "ruleReturnedMatchPos": -1,
 
 # NOT YET SUPPORTED. How strict should the extraction be? If rule returns more than one result, should this be considered
 # an error?
 "ruleReturningMoreIsError": False,
 
 # List of characters to remove from the extracted value (text or attribute)
 "ruleRemoveChars": [],
}


]


}