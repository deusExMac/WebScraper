
########################################################################################################################################################
#
# Example library 6: Demonstrating the use of post match preconditions i.e. preconditions that are applied to the elements returned by ruleCSSSelector
#                    (or ecRuleCSSSelector) and before returning the results. These match preconditions are applied individually to each returned element.
#                    Match preconditions allow to filter out elements matching ruleCSSSelector (or ecRuleCSSSelector).
#                    +++ UNIFINISHED +++ USE THIS! h3+ .jquery-tablesorter tbody tr > *
#                    ruleCSSSelector selector using the field ecRuleCSSSelector in preconditions, if precondition is True. 
#                    This means that the css selector for scrapping data specified in ruleCSSSelector changes based on which page
#                    precondition is true. ruleCSSSelector overwriting works ONLY when rulePreconditionType has value ANY. If more
#                    than one preconditions are True, the first precondition evaluating to TRUE overwrites ruleCSSSelector if
#                    ecRuleCSSSelector is not empty.  
# 
# Related fields: ecRuleCSSSelector, rulePreconditions, ruleCSSSelector, rulePreconditionType (ANY)  
#
# This library scraps/extracts the teams and coaches' (manager or Head coaches') name of english wikipedia pages about premier league teams. 
# The rules in file example4-en.wikipedia.exr makes the assumption that the manager's name is always at a very specific
# position in the infobox (8th position of the field list). However this might not always be the case. See e.g. (checked 7/9/2022)
# 
#   https://en.wikipedia.org/wiki/Arsenal_F.C. where the coach/manager is at the 8th position of the field list inside the infobox
# and
#   https://en.wikipedia.org/wiki/Aston_Villa_F.C. where the coach/manager is at the 9th position of the field list inside the infobox.
# 
# Using overwriting of the rule's ruleCSSSelector, a rule may not only simply CHECK different parts of the page to locate the information it is looking for
# but also allows it to use different selectors to extract the information based on which precondition was evaluated as true.
# These precondition level selectors are defined in the field ecRuleCSSSelector available in each precondition that
# overwrite, if present, the rule's ruleCSSSelector. 
# If this field is empty (default), no overwritting is carried out. If more than one preconditions are true, ruleCSSSelector is
# replaced by the value of ecRuleCSSSelector of the first precondition evaluated as true.
#
# In essense, by overwriting the rule's ruleCSSSelector, the ruleCSSSelector is not static but can be conditionally defined based on the precondition. 
# This means that preconditions will function like this:
#
# IF PRECONDITION1 is TRUE:
#    change ruleCSSSelector to ecRuleCSSSelector of precondition1
# ELSE IF PRECONDITION2 is TRUE
#         change ruleCSSSelector to ecRuleCSSSelector of precondition2
# ELSE IF PRECONDITION3 is TRUE
#         change ruleCSSSelector to ecRuleCSSSelector of precondition3
# etc
# 
# In a rule, not all preconditions need to define a ecRuleCSSSelector. If some preconditions do not define ecRuleCSSSelector and are true, the ruleCSSSelector
# applied.
#
# 
# How to use this rule:
#
# crawl -M -n -1 -r rules/example6-en.wikipedia.exr -o csv/example6.csv  https://en.wikipedia.org/wiki/List_of_Premier_League_clubs
#
# NOTE: option -n -1 means no maximum number of pages constraint so that at least some premier league football pages will be fetched/processed. If no -n
# option is provided, maximum number of pages to fetch defaults to setting maxPages in the loaded config file.
#
# 
# v0.1@14/8/2022
#
########################################################################################################################################################



{

# Description of the library

"libraryDescription": "Library to extract the team and manager name from english wikipedia articles on to premier league clubs",



# List of rule names, whose extracted data should be stored in the csv file. 
# IMPORTANT: date the url was accessed (dateaccessed) and the url are always automatically added to the csv file

"csvLineFormat":["teamNameWonMoreThan2UCL"],

# The list of ruleNames that must return non-empty values
# to consider the extraction successful and the data be written to the csv file. 

"requiredFilledFields": ["teamNameWonMoreThan2UCL"],

# Minimum percentage of ruleName that must return non-empty
# data during their application in order to consider the extraction process
# a success and hence add the extracted data to the csv file.

"allowedMinimumFilled" : 0.8


# How should the downloaded html page be rendered.
# WebScraper supports two modes of URL downloads:
# static: meaning that the web page does not load its content dynamically (via js or ajax) and one http request is enough to get
#         the entire page content. 
# dynamic: meaning the athe web page has dynamic content that is loaded via js or ajax once the web page has
#          been downloaded or is scrolled. Example of such dynamic pages are e.g. youtube pages where comments are only displayed
#          when the user scrolls down. Scraping such dynamic pages is also supported by WebScraper. Dynamic pages load slower though.
# 
# If renderPages has a value of False, this means the no page rendering is carried out and should be used only in case of pages that
# do not load content dynamicaly.
# If renderPages has a value of True, this means the page rendering is done and should be used only in case of pages that load content
# dynamically. 
# 
# Since we access wikipedia articles with no dynamic content, we will statically load these pages. Hence renderPages is set to False. This
# will make page loading faster. If renderPages is missing, it defaults to False.

"renderPages":True,



# List of individual rules comprising this library and that will be applied to each page downloaded follows. 
# This library consists of one rule only, named articleTitle. The value extracted by this rule
# will be assigned to a special key/variable with the same name as the rule i.e. articleTitle.
# These keys/variables can be references inside the rule file e.g. see csvLineFormat field above.

"library": [



# Rule to extract/scrape the title of the downloaded article. The title
# is assumed to be the teams name, not it's full name (or formal name)

{

 # If no ruleName is specified, the extracted data of this rule cannot be used
 # in  the csvLineFormat attribute.
 
 "ruleName": "teamNameWonMoreThan2UCL",
 
 
 # Short description
 
 "ruleDescription": "Extracts the team name that has won the UCL more than 2 times",
 
 
 
 # Regular expression specifying which URL pattern will trigger the
 # execution of this rule. 
 # This is a list ([]) meaning you may add many disjunctive regular expressions
 # Here we specify that this rule is to be activated when the URL contains en.wikipedia.org/wiki.
 # Special regular expression metacharacters (.) are escaped.
 
 "ruleURLActivationCondition": ["en\.wikipedia\.org/wiki"],
 
 
 # A CSS selector specifying the element on the page to scrape.
 # NOTE: the CSS selector may return more than one mathing element.
 
 "ruleCSSSelector": "h3+ .jquery-tablesorter tr",
 
 "ruleMatchPreconditions": [
                                {
                                  "ecCSSSelector" : "td:nth-child(1)" 
                                  "ecTextCondition" : "Paris"
                                  "ecRuleCSSSelector" : "td:nth-child(2)"
                                }
    
                             ],
 
 # Once the CSS selector element in  ruleCSSSelector has been found, what 
 # exactly to extract from element: the text or some other attribute. 
 # text means simply return the text of the scraped element.
 "ruleTargetAttribute": "text",
 
 # Regular expression that specifies the condition the extracted text or attribute value has to
 # fulfill. Empty string here means no condition. If condition is not met, nothing is returned.
 "ruleContentCondition": "",
 
 # Does this rule return more than one result?
 "ruleReturnsMore": True,
 
 # If the rule returns more than one result, which result to return. Negative means all elements. 
 # This takes only effect if ruleReturnsMore is set to True.
 "ruleReturnedMatchPos": -1,
 
 # NOT YET SUPPORTED. How strict should the extraction be? If rule returns more than one result, should this be considered
 # an error?
 "ruleReturningMoreIsError": False,
 
 # List of characters to remove from the extracted value (text or attribute)
 "ruleRemoveChars": [],
}






]


}