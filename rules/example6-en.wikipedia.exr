
########################################################################################################################################################
#
# Example library 6: Demonstrating the use of more than one page preconditions that also overwrite/change the rule's specified 
#                    ruleCSSSelector selector. 
#                    i.e. the css selector for scrapping data specified in ruleCSSSelector changes based on which page
#                    precondition is true. ruleCSSSelector overwriting works ONLY when rulePreconditionType is ANY. If more
#                    than one preconditions are True, the first precondition evaluating to TRUE overwrites ruleCSSSelector if
#                    ecRuleCSSSelector is not empty.  
#                    changes based on which page precondition holds. 
#                    how these preconditions are evaluated. This example demonstrates evaluation using the ANY operator between
#                    preconditions i.e. rule is applied if any of the specified preconditions is TRUE. 
# 
# This library scraps/extracts the teams and coaches' (manager or Head coaches') name of english wikipedia about premier league teams. 
# The rules in file example4-en.wikipedia.exr makes the assumption that the manager's name is always at a very specific
# position in the infobox (8th position of the field list). However this might not always be the case. See e.g.
# 
#   https://en.wikipedia.org/wiki/Arsenal_F.C. where the coach/manager is at the 8th position of the field list inside the infobox
# and
#   https://en.wikipedia.org/wiki/Aston_Villa_F.C. where the coach/manager is at the 9th position of the field list inside the infobox.
# 
# Using overwriting of the rule's ruleCSSSelector the rule may not only check different parts of the page to locate the information it is looking for
# but also to use different selectors to extract the information based on the precondition. These precondition level selectors are defined in the 
# fild ecRuleCSSSelector available in each preconditions. If this field is empty (default), no overwritting is enforced. If a precondition is true
# has a non empty CSS selector in the field ecRuleCSSSelector, then this selector will replace ruleCSSSelector.
#
# In essense, by overwriting the rule's ruleCSSSelector, the ruleCSSSelector is not static but conditionally defined based on the precondition. 
# This means that preconditions will function like this:
#
# IF PRECONDITION1 is TRUE:
#    change ruleCSSSelector to ecRuleCSSSelector of precondition1
# ELSE IF PRECONDITION2 is TRUE
#         change ruleCSSSelector to ecRuleCSSSelector of precondition2
# ELSE IF PRECONDITION3 is TRUE
#         change ruleCSSSelector to ecRuleCSSSelector of precondition3
# ...
# 
# In a rule, not all precondtions need to define  a ecRuleCSSSelector. If some preconditions do not define ecRuleCSSSelector and are true, the ruleCSSSelector
# applied.
#
# This library demonstrates the use of more than one page preconditions and how these are evaluated to determine if the rule should
# be applied or not. If the evaluation of preconditions return the value TRUE, ruleCSSSelector is applied on the page currently 
# processed.
# If evaluation of preconditions returns FALSE, the rule is not applied.
#
# The library contains rule "getLinks" for harvesting links.
# 
# How to apply this rule:
#
# crawl -M -n -1 -r rules/example5-en.wikipedia.exr -o csv/STATSORALG.csv -G https://en.wikipedia.org/wiki/Statistics
#
# NOTE: option -n -1 means no maximum number of pages constraint so that at least some premier league football pages will be fetched/processed. If no -n
# option is provided, maximum number of pages to fetch defaults to setting maxPages in the loaded config file.
#
# 
# v0.1@14/8/2022
#
########################################################################################################################################################



{

# Description of the library

"libraryDescription": "Library to extract the title of english wikipedia articles related to statistics OR algebra.",



# List of rule names, whose extracted data should be stored in the csv file. 
# IMPORTANT: date the url was accessed (dateaccessed) and the url are always automatically added to the csv file

"csvLineFormat":["teamName", "manager"],

"allowedMinimumFilled" : 0.8

# How should the downloaded html page be rendered.
# WebScraper supports two modes of URL downloads:
# static: meaning that the web page does not load its content dynamically (via js or ajax) and one http request is enough to get
#         the entire page content. 
# dynamic: meaning the athe web page has dynamic content that is loaded via js or ajax once the web page has
#          been downloaded or is scrolled. Example of such dynamic pages are e.g. youtube pages where comments are only displayed
#          when the user scrolls down. Scraping such dynamic pages is also supported by WebScraper. Dynamic pages load slower though.
# 
# If renderPages has a value of False, this means the no page rendering is carried out and should be used only in case of pages that
# do not load content dynamicaly.
# If renderPages has a value of True, this means the page rendering is done and should be used only in case of pages that load content
# dynamically. 
# 
# Since we access wikipedia articles with no dynamic content, we will statically load these pages. Hence renderPages is set to False. This
# will make page loading faster. If renderPages is missing, it defaults to False.

"renderPages":False,



# List of individual rules comprising this library and that will be applied to each page downloaded follows. 
# This library consists of one rule only, named articleTitle. The value extracted by this rule
# will be assigned to a special key/variable with the same name as the rule i.e. articleTitle.
# These keys/variables can be references inside thi rule file e.g. see csvLineFormat field above.

"library": [



# Rule to extract/scrape the title of the downloaded article. The title
# is assumed to be the teams name, not it's full name (or formal name)

{

 # If no ruleName is specified, the extracted data of this rule cannot be used
 # in  the csvLineFormat attribute.
 
 "ruleName": "teamName",
 
 
 # Short description
 
 "ruleDescription": "Extracts the team and manager name from wikipedia article to premier league pages",
 
 
 
 # Regular expression specifying which URL pattern will trigger the
 # execution of this rule. 
 # This is a list ([]) meaning you may add many disjunctive regular expressions
 # Here we specify that this rule is to be activated when the URL contains en.wikipedia.org/wiki.
 # Special regular expression metacharacters (.) are escaped.
 
 "ruleURLActivationCondition": ["en\.wikipedia\.org/wiki"],
 
 
 # A CSS selector specifying the element on the page to scrape.
 # NOTE: the CSS selector may return more than one mathing element.
 
 "ruleCSSSelector": "#firstHeading",
 
 
 # Once the CSS selector element in  ruleCSSSelector has been found, what 
 # exactly to extract from element: the text or some other attribute. 
 # text means simply return the text of the scraped element.
 "ruleTargetAttribute": "text",
 
 # Regular expression that specifies the condition the extracted text or attribute value has to
 # fulfill. Empty string here means no condition. If condition is not met, nothing is returned.
 "ruleContentCondition": "",
 
 # Does this rule return more than one result?
 "ruleReturnsMore": False,
 
 # If the rule returns more than one result, which result to return. Negative means all elements. 
 # This takes only effect if ruleReturnsMore is set to True.
 "ruleReturnedMatchPos": 0,
 
 # NOT YET SUPPORTED. How strict should the extraction be? If rule returns more than one result, should this be considered
 # an error?
 "ruleReturningMoreIsError": False,
 
 # List of characters to remove from the extracted value (text or attribute)
 "ruleRemoveChars": [],
},




# Rule to extract/scrape the name of the team's manager inside the infobox.

{

 # If no ruleName is specified, the extracted data of this rule cannot be used
 # in  the csvLineFormat attribute.
 
 "ruleName": "manager",
 
 
 # Short description
 
 "ruleDescription": "Extracts a team's manager from wikipedia articles",
 
 
 
 # Regular expression specifying which URL pattern will trigger the
 # execution of this rule. 
 # This is a list ([]) meaning you may add many disjunctive regular expressions
 # Here we specify that this rule is to be activated when the URL contains en.wikipedia.org/wiki.
 # Special regular expression metacharacters (.) are escaped.
 
 "ruleURLActivationCondition": ["en\.wikipedia\.org/wiki"],
 
 
 # rulePreconditionType specifies how to evaluate preconditions, if more than one is
 # present. ANY means that if any of the preconditions returns TRUE, precondition hold and
 # the rule is applied. You may consider value ANY as evaluating the logical expression:
 #
 #  PRECONDITION1 OR PRECONDITION2 OR PRECONITION3 ...
 #  If the above expression returns true, the rule is applied on the page.
 #
 #  Other values supported are: ALL, EVAL. 
 #  ALL: All preconditions MUST hold in order for the rules to be applied. Rule is applied
 # if the next expression is 
 #  EVAL: complicated logical expressions can be expressed i.e. (PRECONDITION1 OR PRECONDITION2) AND NOT PRECONDITION3
 #
 #  See documentation for more help on this.
 
 "rulePreconditionType": "ANY",
 
 
 
 # Page rule preconditions, i.e. preconditions that must hold for the PAGE currently processed   
 # in order to apply the selector in ruleCSSSelector. 
 # The next preconditions feature all an non-empty ecRuleCSSSelector that overwrites the rule's ruleCSSSelector
 # by the first precondition that is evaluated as true.
 # 
 
 "rulePreconditions" : [ 
                          # First precondition: Check if manager is at this part of the page
                          {
                             # The precondition selector i.e. the element to be
                             # checked. This precondition checks if the pages is
                             # about Statistics
                        
                             "ecCSSSelector" : "tr:nth-child(9) .infobox-label", 
                            
                            
                            # Regular expression the text property of the element 
                            # in ecCSSSelector must match. Only text property is currently 
                            # supported. If element matches regular expression, the 
                            # precondition holds and the ruleCSSSelector is applied.
                            #
                            # An empty value (the default if ecTextCondition is missing) 
                            # means that this precondition holds if the element 
                            # specified in ecCSSSelector exists on the page currently processed.
                            # 
                            # REMEMBER: If you would like to specify a case INsensitive match,
                            # you may add the (?i) flag                              
                            
                            "ecTextCondition" : "(?i)(Manager|Head coach)",
                            
                            # If the 9th child in the infobox has as text manager or head coach
                            # then replace the rule's ruleCSSSelector with the value of 
                            # ecRuleCSSSelector in this precondition.
                            
                            "ecRuleCSSSelector" : "tr:nth-child(9) .agent"
                          },
                          
                          
                          # Second precondition: Check if manager is at a different position
                          # of the infobox
			    {
			       # The precondition selector i.e. the element to be
			       # checked. This precondition checks if the pages is
			       # about Statistics

			       "ecCSSSelector" : "tr:nth-child(10) .infobox-label", 


			      # Regular expression the text property of the element 
			      # in ecCSSSelector must match. Only text property is currently 
			      # supported. If element matches regular expression, the 
			      # precondition holds and the ruleCSSSelector is applied.
			      #
			      # An empty value (the default if ecTextCondition is missing) 
			      # means that this precondition holds if the element 
			      # specified in ecCSSSelector exists on the page currently processed.
			      # 
			      # REMEMBER: If you would like to specify a case INsensitive match,
			      # you may add the (?i) flag                              

			      "ecTextCondition" : "(?i)(Manager|Head coach)",

			      # If the 10th child in the infobox has as text manager or head coach
			      # then replace the rule's ruleCSSSelector with the value of 
			      # ecRuleCSSSelector in this precondition.
			      "ecRuleCSSSelector" : "tr:nth-child(10) .agent"
                          },
                          
                          # NOTE: You may add here more preconditions with overwriting the ruleCSSSelector
                          #       if you would like to check other positions of the infobox for the same 
                          #       data as well.
 ],
 
 
 
 # A CSS selector specifying the element on the page to scrape. 
 # Since the above preconditions may overwrite this selector, this
 # selector is only used in cases when preconditions do not specify
 # ecRuleCSSSelector i.e. do not overwrite this selector.
 # NOTE: the CSS selector may return more than one matching element.
 
 "ruleCSSSelector": "tr:nth-child(9) .agent",
 
 
 # Once the CSS selector element in  ruleCSSSelector has been found, what 
 # exactly to extract from element: the text or some other attribute. 
 # text means simply return the text of the scraped element.
 "ruleTargetAttribute": "text",
 
 # Regular expression that specifies the condition the extracted text or attribute value has to
 # fulfill. Empty string here means no condition. If condition is not met, nothing is returned.
 "ruleContentCondition": "",
 
 # Does this rule return more than one result?
 "ruleReturnsMore": False,
 
 # If the rule returns more than one result, which result to return. Negative means all elements. 
 # This takes only effect if ruleReturnsMore is set to True.
 "ruleReturnedMatchPos": 0,
 
 # NOT YET SUPPORTED. How strict should the extraction be? If rule returns more than one result, should this be considered
 # an error?
 "ruleReturningMoreIsError": False,
 
 # List of characters to remove from the extracted value (text or attribute)
 "ruleRemoveChars": [],
},


#],
                          
 

# Rule for extracting links from the page
# A the name getLinks is a keyword signifying a rule that extracts
# hyperlinks found on the page what match the specified conditions.
#
# When you would like to extract and follow hyperlinks found on a webpage,
# you must name the respective rule extracting these hyperlins getLinks. 
# This is because the extracted links are handled differently from other 
# extracted data (e.g. they must be added to the queue).


{

 # Name of rule. Remember getLinks is a reserved word implying
 # a very specific behavior.
 "ruleName": "getLinks",
 
 "ruleDescription": "Extracting hyperlinks from the downloaded webpage",
 
 # Regular expression specifying for which URLs/pages to activate this rule.
 "ruleURLActivationCondition": ["en\.wikipedia\.org.*$"],
 
 # CSS selector containing the information (hyperlink) to extract
 "ruleCSSSelector": "a[href]",
 
 # From the specified selector, we are interested only in the value of the
 # attribute href, which contains the hyperlink.
 # NOTICE: WebScraper takes care of relative links
 "ruleTargetAttribute": "href",
 
 # Once we got the value of the target attribute, this regular expression
 # specifies a condition that the value has to meet. Here, we are interested 
 # only in hyperlinks that point to english wikipedia pages. I.e. pages outside
 # of the english wikipedia site will not be extracted and hence won't be followed.
 "ruleContentCondition": "en\.wikipedia\.org/.*$",
 
 # This signifies that this rule will not return only one chunk of information, but
 # a list of chunkc since a web page may have many <a href= > tags.
 "ruleReturnsMore": True,
 
 # -1 means return all matched
 "ruleReturnedMatchPos": -1,
 
 "ruleReturningMoreIsError": False 
}

]


}