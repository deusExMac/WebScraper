
########################################################################################################################################################
#
# Example library 8: Demonstrating the use of (post) match CSS selectors with element breakdown using the rulePostCSSSelector field i.e. 
#                    selectors that are applied to each result of ruleCSSSelector breaking them apart and storing
#                    each part as a new key. This results in returning a so called recordlist i.e. a list of
#                    dictionaries containing new new keys that will be the value of the key with rule name.. 
#                    
# 
# Related fields: rulePostCSSSelector, ruleReturnedValueNames, ruleCSSSelector, csvLineFormat, requiredFilledFields  
#
#
#
# When to use match preconditions:
#      1) When the ruleCSSSelectors returns more than one result and
#      2) You want to return from each result very specific parts.
#
# Allying rulePostCSSSelector will return a list of dictionaries known as a recordlist. Examples up to this point
# returned simple records, i.e. list of key/value pairs where the value is a simple value or a list of string valued.
# Each dict is saved as separate line in the csv file.
# To save these dictionaries to the csv file, the fields csvLineFormat and requiredFilledFields need to be updated properly with the new
# fields.
#
# TODO: Update next paragraphs.
#
# The example rule below extracts the name of football teams that have won the Champions league more than three times (>3) in their club history.
# It does this by downloading the wikipedia page 
#
#    https://en.wikipedia.org/wiki/List_of_European_Cup_and_UEFA_Champions_League_finals
#
# and extracting data from the table with caption "Performances in the European Cup and UEFA Champions League by club".
#
# To achieve this, the rule does the following once the above wikipedia page has been downloaded:
#
# 1) Extracts all table rows of a specific table (tr) containing club names and the times they have won the Champions League
# 2) Applies a match precondition on EACH tr element extracted in 1) that checks i) if a specific td, containing data on the number of times a 
#    team has won, has value greater than 3 and ii) if i) holds, it returns the name of the team which is in a different part (a th) of the same table row (tr) by applying
#    ecRuleCSSSelector on the tr element currently processed. 
#
# More than one match preconditions can be defined in the context of the same rule. Currently, only operator ANY is supported for these match preconditions.
# If multiple match preconditions match, the first matching precondition's ecRuleCSSSelector is applied, if specified.
# 
# How to use this rule:
#
# crawl -n 1 -r rules/example7-en.wikipedia.exr -o csv/example7.csv  https://en.wikipedia.org/wiki/List_of_European_Cup_and_UEFA_Champions_League_finals
#
#
# 
# v0.1@09/09/2022
#
########################################################################################################################################################



{

# Description of the library

"libraryDescription": "Library to extract from a specific wikipedia page team names that have won the Champions League more than 3 times",



# List of rule names, whose extracted data should be stored in the csv file. 
# IMPORTANT: date the url was accessed (dateaccessed) and the url are always automatically added to the csv file

"csvLineFormat":["name", "winnerCount"],

# The list of ruleNames that must return non-empty values
# to consider the extraction successful and the data be written to the csv file. 

"requiredFilledFields": ["name"],

# Minimum percentage of ruleName that must return non-empty
# data during their application in order to consider the extraction process
# a success and hence add the extracted data to the csv file.

"allowedMinimumFilled" : 0.8


# How should the downloaded html page be rendered.
# WebScraper supports two modes of URL downloads:
# static: meaning that the web page does not load its content dynamically (via js or ajax) and one http request is enough to get
#         the entire page content. 
# dynamic: meaning the athe web page has dynamic content that is loaded via js or ajax once the web page has
#          been downloaded or is scrolled. Example of such dynamic pages are e.g. youtube pages where comments are only displayed
#          when the user scrolls down. Scraping such dynamic pages is also supported by WebScraper. Dynamic pages load slower though.
# 
# If renderPages has a value of False, this means the no page rendering is carried out and should be used only in case of pages that
# do not load content dynamicaly.
# If renderPages has a value of True, this means the page rendering is done and should be used only in case of pages that load content
# dynamically. 
# 
# Since we access wikipedia articles with no dynamic content, we will statically load these pages. Hence renderPages is set to False. This
# will make page loading faster. If renderPages is missing, it defaults to False.

"renderPages":False,



# List of individual rules comprising this library and that will be applied to each page downloaded follows. 
# This library consists of one rule only, named articleTitle. The value extracted by this rule
# will be assigned to a special key/variable with the same name as the rule i.e. articleTitle.
# These keys/variables can be references inside the rule file e.g. see csvLineFormat field above.

"library": [



# Rule to extract/scrape the title of the downloaded article. The title
# is assumed to be the teams name, not it's full name (or formal name)

{

 # If no ruleName is specified, the extracted data of this rule cannot be used
 # in  the csvLineFormat attribute.
 
 "ruleName": "teamNamesWithMoreThan3UCLTitles",
 
 
 # Short description
 
 "ruleDescription": "Extracts the team name that has won the UCL more than 2 times",
 
 
 
 # Regular expression specifying which URL pattern will trigger the
 # execution of this rule. 
 # This is a list ([]) meaning you may add many disjunctive regular expressions
 # Here we specify that this rule is to be activated when the URL contains en.wikipedia.org/wiki.
 # Special regular expression metacharacters (.) are escaped.
 
 "ruleURLActivationCondition": ["en\.wikipedia\.org/wiki"],
 
 
 # A CSS selector specifying the element on the page to scrape.
 # NOTE: the CSS selector may return more than one mathing element.
 
 "ruleCSSSelector": "h3 + .plainrowheaders tr",
 
 # List of match preconditions that will be applied
 # to each and every result returned by ruleCSSSelector. Elements
 # matching preconditions will be kept in result list, elements that
 # don't match will be removed from the result set. The match precondition
 # in this example specifies the ecRuleCSSSelector field which means that
 # if the precondition holds for an element, a different part of the examined element is 
 # extracted and returned. 
 # If more than one match precondition is specified, these are
 # combined using ANY operator.
 # Currently, only ANY operator is supported.
 #
 # NOTE: Match preconditions without ecRuleCSSSelector field have not been tested.
 
 "ruleMatchPreconditions": [
  
                                # A match precondition. This precondition checks if each
                                # row extracted by ruleCSSSelector has in the second td element
                                # a number greater than 3. If so, the th element from the 
                                # processed row is extracted and returned as the result.
                                # This is done for all tr elements.
                                {
                                  # Element of tr to check. This CSS selector is applied to
                                  # each and every tr element  
                                  # returned by ruleCSSSelector.
                                  
                                  "ecCSSSelector" : "td:nth-child(2)", 
                                  
                                  
                                  # Condition the elements specified by ecCSSSelector have to match. 
                                  # tr elements that do not match this condition will be
                                  # removed from the extracted list.
                                  # Here we check if td element td:nth-child(2), that keeps the number of titles, 
                                  # contains a number that is greater than 3 (>3).
                                  
                                  "ecTextCondition" : "([4-9]|\d{2,})",
                                  
                                  # NOTE: we don't need a ecRuleCSSSelector here
                                  
                                }
    
                             ],
 
 # Once the CSS selector element in  ruleCSSSelector has been found, or data has been
 # extracted by ecRuleCSSSelector, what 
 # exactly to extract from this element: the text or some other attribute. 
 # text means simply return the text of the scraped element.
 #
 # In ruleMatchPreconditions, ruleTargetAttribute will be applied to the newly extracted
 # elements.
 "ruleTargetAttribute": "text",
 
 
 
 "rulePostCSSSelector" : ["th", "td:nth-child(2)"]
 "ruleReturnedValueNames" : ["name", "winnerCount"]
 
 
 # Regular expression that specifies the condition the extracted text or attribute value has to
 # fulfill. Empty string here means no condition. If condition is not met, nothing is returned.
 "ruleContentCondition": "",
 
 # Does this rule return more than one result?
 "ruleReturnsMore": True,
 
 # If the rule returns more than one result, which result to return. Negative means all elements. 
 # This takes only effect if ruleReturnsMore is set to True.
 "ruleReturnedMatchPos": -1,
 
 # NOT YET SUPPORTED. How strict should the extraction be? If rule returns more than one result, should this be considered
 # an error?
 "ruleReturningMoreIsError": False,
 
 # List of characters to remove from the extracted value (text or attribute)
 "ruleRemoveChars": [],
}






]


}