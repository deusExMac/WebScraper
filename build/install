#!/bin/bash


#
# Initialize some variables
# related to paths that will be needed.
#

# Directory the executed script is located
SCRIPTDIR=$(dirname $0)



# settings script contains
# initialization of some important variables 
# required in this script.
# Change the values of variables in this file
# if you want to change paths

source "$SCRIPTDIR"/settings






printf "\n\n${BCyan}[$(date +"%d-%b-%Y %H:%M:%S")] Executing installation script on "$OSPLATFORM"${NC}\n\n"



# The directory where the python virtual environment has been
# created.
# If this is left empty, no virtual environment is setup and installation
# is continued in current context
# NOTE: you cannot have spaces around the = sign
# in bash shell scripts

virtualEnvironmentDir=""


# Check if command line arguments were given to the script
while getopts d:a:f: flag
do
    case "${flag}" in
        d) virtualEnvironmentDir=${OPTARG};;
        a) age=${OPTARG};;
        f) fullname=${OPTARG};;
    esac
done

# not needed if there are no positional parameters
#shift $((OPTIND-1))     


# Check if path given in command line argument
if [ -z "$virtualEnvironmentDir" ]; then 
   # No argument for virtual environment given. Continue with default
   virtualEnvironmentDir="$defaultVirtualEnvironmentDir"
fi

# If path availabe, generate proper absolute path
if [ ! -z "$virtualEnvironmentDir" ]; then 

  if [[ $(echo ${OSPLATFORM} | tr '[:lower:]' '[:upper:]') =~ .*(LINUX|OSX|DARWIN|BSD).* ]]; then
    
    # =~ ^//*
    if [[ ! "${virtualEnvironmentDir:0:1}" == / ]];
    then
       virtualEnvironmentDir="${EXECUTIONDIR}/${virtualEnvironmentDir}"
    fi

  elif [[ $(echo ${OSPLATFORM} | tr '[:lower:]' '[:upper:]') =~ .*(WINDOWS|WIN32|MSYS).* ]]; then
    if [[ ! "$virtualEnvironmentDir" == [A-Za-z]:*  ]]; then
       virtualEnvironmentDir="${EXECUTIONDIR}/${virtualEnvironmentDir}"
    fi
    
  fi


fi



printf "\tScript location: ${IWhite}${SCRIPTDIR}${NC}\n"
printf "\tScript execution dir: ${IWhite}${EXECUTIONDIR}${NC}\n"
printf "\tScript working directory: ${IWhite}"$PWD"${NC}\n"
printf "\tDefault virtual directory: ${IWhite}"$defaultVirtualEnvironmentDir"${NC} \n"
printf "\tVirtual environment directory: ${IWhite}"$virtualEnvironmentDir"${NC}\n"

printf "\n\n"




if [ -z "$virtualEnvironmentDir" ] 
then
    printf ">>> ${IYellow}Executing WITHOUT Virtual environment.${NC}\n"

else

    printf ">>> ${IYellow}Executing WITH Virtual environment. Directory: "$virtualEnvironmentDir" ${NC}\n"


    if [ -d "$virtualEnvironmentDir" ] 
    then
        printf ">>> ${IYellow}Directory $virtualEnvironmentDir already exists.${NC}\n" 
    else
        printf ">>> ${IYellow}Directory $virtualEnvironmentDir does not exists. Creating...${NC}\n"
        python3 -m venv "$virtualEnvironmentDir"
        if [ ! -d "$virtualEnvironmentDir" ] 
        then
            printf ">>> ${IYellow}Directory created not found. Script terminating...${NC}"
            exit -2
        fi
        
    fi



    printf ">>> ${IYellow}Activating environment "$virtualEnvironmentDir"${NC}\n"

    # Activate environment. Make sure that this environment exists
    # NOTE: . (dot) operator is a synonym for the source command
    . "$virtualEnvironmentDir"/bin/activate

fi 






# Installing python virtual environment dependencies
printf ">>> ${IYellow}Installing module dependencies... ${NC}\n" 
printf ">>> ${Yellow}"
pip3 install -r "$SCRIPTDIR"/module-requirements.txt
printf "${NC}"


printf "\n\nInstallation finished. Execute WebScraper in the following ways:\n"
printf "\t* Automatic execution:\n"
printf "\t\t1) run script ${BIYellow}build/run [-I][-B][-W]${NC}\n"
printf "\t* Manual execution:\n"
printf "\t\t1) For ${BIYellow}interactive mode${NC}, execute: ${BIYellow}python webScraper.py ${NC}. See documentation for optional arguments.\n"
printf "\t\t2) For ${BIYellow}batch mode${NC}, execute: ${BIYellow}python webScraper.py -B ${NC}. See documentation for other optional arguments.\n"
printf "\t\t3) For ${BIYellow}web mode${NC}, execute: ${BIYellow}flask --app webApp.py run ${NC}\n\n"
